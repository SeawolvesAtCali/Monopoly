// @generated by protobuf-ts 1.0.12 with parameters disable_service_client
// @generated from protobuf file "prisel/annotations.proto" (package "prisel", syntax proto3)
// tslint:disable
import { BinaryWriteOptions } from "@protobuf-ts/runtime";
import { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import { BinaryReadOptions } from "@protobuf-ts/runtime";
import { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PacketType } from "./packet_type";
import { SystemActionType } from "./system_action_type";
/**
 * @generated from protobuf message prisel.SystemActionSpec
 */
export interface SystemActionSpec {
    /**
     * @generated from protobuf field: prisel.SystemActionType type = 1;
     */
    type: SystemActionType;
    /**
     * @generated from protobuf field: prisel.PacketType packet_type = 2;
     */
    packetType: PacketType;
}
/**
 * @generated from protobuf message prisel.ActionSpec
 */
export interface ActionSpec {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * @generated from protobuf field: prisel.PacketType packet_type = 2;
     */
    packetType: PacketType;
}
/**
 * Type for protobuf message prisel.SystemActionSpec
 */
class SystemActionSpec$Type extends MessageType<SystemActionSpec> {
    constructor() {
        super("prisel.SystemActionSpec", [
            { no: 1, name: "type", kind: "enum", T: () => ["prisel.SystemActionType", SystemActionType] },
            { no: 2, name: "packet_type", kind: "enum", T: () => ["prisel.PacketType", PacketType] }
        ]);
    }
    create(value?: PartialMessage<SystemActionSpec>): SystemActionSpec {
        const message = { type: 0, packetType: 0 };
        if (value !== undefined)
            reflectionMergePartial<SystemActionSpec>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SystemActionSpec): SystemActionSpec {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* prisel.SystemActionType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* prisel.PacketType packet_type */ 2:
                    message.packetType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SystemActionSpec, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* prisel.SystemActionType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* prisel.PacketType packet_type = 2; */
        if (message.packetType !== 0)
            writer.tag(2, WireType.Varint).int32(message.packetType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const SystemActionSpec = new SystemActionSpec$Type();
/**
 * Type for protobuf message prisel.ActionSpec
 */
class ActionSpec$Type extends MessageType<ActionSpec> {
    constructor() {
        super("prisel.ActionSpec", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "packet_type", kind: "enum", T: () => ["prisel.PacketType", PacketType] }
        ]);
    }
    create(value?: PartialMessage<ActionSpec>): ActionSpec {
        const message = { type: "", packetType: 0 };
        if (value !== undefined)
            reflectionMergePartial<ActionSpec>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActionSpec): ActionSpec {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* prisel.PacketType packet_type */ 2:
                    message.packetType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActionSpec, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* prisel.PacketType packet_type = 2; */
        if (message.packetType !== 0)
            writer.tag(2, WireType.Varint).int32(message.packetType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const ActionSpec = new ActionSpec$Type();
