// @generated by protobuf-ts 1.0.12 with parameters disable_service_client
// @generated from protobuf file "monopoly/announce_roll_spec.proto" (package "monopoly", syntax proto3)
// tslint:disable
import { BinaryWriteOptions } from "@protobuf-ts/runtime";
import { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import { BinaryReadOptions } from "@protobuf-ts/runtime";
import { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coordinate } from "./coordinate";
/**
 * @generated from protobuf message monopoly.AnnounceRollPayload
 */
export interface AnnounceRollPayload {
    /**
     * @generated from protobuf field: string player = 1;
     */
    player: string;
    /**
     * @generated from protobuf field: int32 steps = 2;
     */
    steps: number;
    /**
     * @generated from protobuf field: repeated monopoly.Coordinate path = 3;
     */
    path: Coordinate[];
    /**
     * @generated from protobuf field: int32 my_money = 4;
     */
    myMoney: number;
}
/**
 * Type for protobuf message monopoly.AnnounceRollPayload
 */
class AnnounceRollPayload$Type extends MessageType<AnnounceRollPayload> {
    constructor() {
        super("monopoly.AnnounceRollPayload", [
            { no: 1, name: "player", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "steps", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "path", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coordinate },
            { no: 4, name: "my_money", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AnnounceRollPayload>): AnnounceRollPayload {
        const message = { player: "", steps: 0, path: [], myMoney: 0 };
        if (value !== undefined)
            reflectionMergePartial<AnnounceRollPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnnounceRollPayload): AnnounceRollPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string player */ 1:
                    message.player = reader.string();
                    break;
                case /* int32 steps */ 2:
                    message.steps = reader.int32();
                    break;
                case /* repeated monopoly.Coordinate path */ 3:
                    message.path.push(Coordinate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 my_money */ 4:
                    message.myMoney = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnnounceRollPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string player = 1; */
        if (message.player !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.player);
        /* int32 steps = 2; */
        if (message.steps !== 0)
            writer.tag(2, WireType.Varint).int32(message.steps);
        /* repeated monopoly.Coordinate path = 3; */
        for (let i = 0; i < message.path.length; i++)
            Coordinate.internalBinaryWrite(message.path[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int32 my_money = 4; */
        if (message.myMoney !== 0)
            writer.tag(4, WireType.Varint).int32(message.myMoney);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const AnnounceRollPayload = new AnnounceRollPayload$Type();
