// @generated by protobuf-ts 1.0.12 with parameters disable_service_client
// @generated from protobuf file "monopoly/chance.proto" (package "monopoly", syntax proto3)
// tslint:disable
import { BinaryWriteOptions } from "@protobuf-ts/runtime";
import { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import { BinaryReadOptions } from "@protobuf-ts/runtime";
import { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coordinate } from "./coordinate";
/**
 * @generated from protobuf message monopoly.ChanceDisplay
 */
export interface ChanceDisplay {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string description = 2;
     */
    description: string;
    /**
     * @generated from protobuf field: optional string image = 3;
     */
    image?: string;
}
/**
 * move to each of the tiles sequentially and perform actions on the each
 * tiles. Normally, player would only go to one tile.
 *
 * @generated from protobuf message monopoly.MoveToTileExtra
 */
export interface MoveToTileExtra {
    /**
     * @generated from protobuf field: monopoly.Coordinate tile = 1;
     */
    tile?: Coordinate;
    /**
     * if teleport, the player will immediately appear at the target tile
     * without passing "GO"
     *
     * @generated from protobuf field: bool is_teleport = 2;
     */
    isTeleport: boolean;
}
/**
 * pay x some money; get some money from all players; pay bank; get from bank
 *
 * @generated from protobuf message monopoly.MoneyExchangeExtra
 */
export interface MoneyExchangeExtra {
    /**
     * player, amount
     *
     * @generated from protobuf field: map<string, int32> exchanges = 1;
     */
    exchanges: {
        [key: string]: number;
    };
    /**
     * @generated from protobuf field: int32 my_current_money = 2;
     */
    myCurrentMoney: number;
}
/**
 * move a specific amount of steps forward or backward
 *
 * @generated from protobuf message monopoly.MoveStepsExtra
 */
export interface MoveStepsExtra {
    /**
     * @generated from protobuf field: int32 steps = 1;
     */
    steps: number;
}
/**
 * add a card to collection. For example: Get out of jail free card
 *
 * @generated from protobuf message monopoly.CollectibleExtra
 */
export interface CollectibleExtra {
    /**
     * @generated from protobuf field: monopoly.CollectibleExtra.CollectibleType type = 1;
     */
    type: CollectibleExtra_CollectibleType;
}
/**
 * @generated from protobuf enum monopoly.CollectibleExtra.CollectibleType
 */
export enum CollectibleExtra_CollectibleType {
    /**
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: GET_OUT_OF_JAIL_FREE = 1;
     */
    GET_OUT_OF_JAIL_FREE = 1
}
/**
 * @generated from protobuf message monopoly.Chance
 */
export interface Chance {
    /**
     * @generated from protobuf field: monopoly.ChanceDisplay display = 1;
     */
    display?: ChanceDisplay;
    /**
     * @generated from protobuf oneof: extra
     */
    extra: {
        oneofKind: "unspecified";
        /**
         * @generated from protobuf field: bool unspecified = 2;
         */
        unspecified: boolean;
    } | {
        oneofKind: "moveToTile";
        /**
         * @generated from protobuf field: monopoly.MoveToTileExtra move_to_tile = 3;
         */
        moveToTile: MoveToTileExtra;
    } | {
        oneofKind: "moneyExchange";
        /**
         * @generated from protobuf field: monopoly.MoneyExchangeExtra money_exchange = 4;
         */
        moneyExchange: MoneyExchangeExtra;
    } | {
        oneofKind: "moveSteps";
        /**
         * @generated from protobuf field: monopoly.MoveStepsExtra move_steps = 5;
         */
        moveSteps: MoveStepsExtra;
    } | {
        oneofKind: "collectible";
        /**
         * @generated from protobuf field: monopoly.CollectibleExtra collectible = 6;
         */
        collectible: CollectibleExtra;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Type for protobuf message monopoly.ChanceDisplay
 */
class ChanceDisplay$Type extends MessageType<ChanceDisplay> {
    constructor() {
        super("monopoly.ChanceDisplay", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "image", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChanceDisplay>): ChanceDisplay {
        const message = { title: "", description: "" };
        if (value !== undefined)
            reflectionMergePartial<ChanceDisplay>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChanceDisplay): ChanceDisplay {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* optional string image */ 3:
                    message.image = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChanceDisplay, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* optional string image = 3; */
        if (message.image !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.image);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const ChanceDisplay = new ChanceDisplay$Type();
/**
 * Type for protobuf message monopoly.MoveToTileExtra
 */
class MoveToTileExtra$Type extends MessageType<MoveToTileExtra> {
    constructor() {
        super("monopoly.MoveToTileExtra", [
            { no: 1, name: "tile", kind: "message", T: () => Coordinate },
            { no: 2, name: "is_teleport", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MoveToTileExtra>): MoveToTileExtra {
        const message = { isTeleport: false };
        if (value !== undefined)
            reflectionMergePartial<MoveToTileExtra>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MoveToTileExtra): MoveToTileExtra {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* monopoly.Coordinate tile */ 1:
                    message.tile = Coordinate.internalBinaryRead(reader, reader.uint32(), options, message.tile);
                    break;
                case /* bool is_teleport */ 2:
                    message.isTeleport = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MoveToTileExtra, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* monopoly.Coordinate tile = 1; */
        if (message.tile)
            Coordinate.internalBinaryWrite(message.tile, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool is_teleport = 2; */
        if (message.isTeleport !== false)
            writer.tag(2, WireType.Varint).bool(message.isTeleport);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const MoveToTileExtra = new MoveToTileExtra$Type();
/**
 * Type for protobuf message monopoly.MoneyExchangeExtra
 */
class MoneyExchangeExtra$Type extends MessageType<MoneyExchangeExtra> {
    constructor() {
        super("monopoly.MoneyExchangeExtra", [
            { no: 1, name: "exchanges", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } },
            { no: 2, name: "my_current_money", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MoneyExchangeExtra>): MoneyExchangeExtra {
        const message = { exchanges: {}, myCurrentMoney: 0 };
        if (value !== undefined)
            reflectionMergePartial<MoneyExchangeExtra>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MoneyExchangeExtra): MoneyExchangeExtra {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, int32> exchanges */ 1:
                    this.binaryReadMap1(message.exchanges, reader, options);
                    break;
                case /* int32 my_current_money */ 2:
                    message.myCurrentMoney = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: MoneyExchangeExtra["exchanges"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof MoneyExchangeExtra["exchanges"] | undefined, val: MoneyExchangeExtra["exchanges"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field monopoly.MoneyExchangeExtra.exchanges");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    internalBinaryWrite(message: MoneyExchangeExtra, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, int32> exchanges = 1; */
        for (let k of Object.keys(message.exchanges))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).int32(message.exchanges[k]).join();
        /* int32 my_current_money = 2; */
        if (message.myCurrentMoney !== 0)
            writer.tag(2, WireType.Varint).int32(message.myCurrentMoney);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const MoneyExchangeExtra = new MoneyExchangeExtra$Type();
/**
 * Type for protobuf message monopoly.MoveStepsExtra
 */
class MoveStepsExtra$Type extends MessageType<MoveStepsExtra> {
    constructor() {
        super("monopoly.MoveStepsExtra", [
            { no: 1, name: "steps", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MoveStepsExtra>): MoveStepsExtra {
        const message = { steps: 0 };
        if (value !== undefined)
            reflectionMergePartial<MoveStepsExtra>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MoveStepsExtra): MoveStepsExtra {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 steps */ 1:
                    message.steps = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MoveStepsExtra, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 steps = 1; */
        if (message.steps !== 0)
            writer.tag(1, WireType.Varint).int32(message.steps);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const MoveStepsExtra = new MoveStepsExtra$Type();
/**
 * Type for protobuf message monopoly.CollectibleExtra
 */
class CollectibleExtra$Type extends MessageType<CollectibleExtra> {
    constructor() {
        super("monopoly.CollectibleExtra", [
            { no: 1, name: "type", kind: "enum", T: () => ["monopoly.CollectibleExtra.CollectibleType", CollectibleExtra_CollectibleType] }
        ]);
    }
    create(value?: PartialMessage<CollectibleExtra>): CollectibleExtra {
        const message = { type: 0 };
        if (value !== undefined)
            reflectionMergePartial<CollectibleExtra>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CollectibleExtra): CollectibleExtra {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* monopoly.CollectibleExtra.CollectibleType type */ 1:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CollectibleExtra, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* monopoly.CollectibleExtra.CollectibleType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const CollectibleExtra = new CollectibleExtra$Type();
/**
 * Type for protobuf message monopoly.Chance
 */
class Chance$Type extends MessageType<Chance> {
    constructor() {
        super("monopoly.Chance", [
            { no: 1, name: "display", kind: "message", T: () => ChanceDisplay },
            { no: 2, name: "unspecified", kind: "scalar", oneof: "extra", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "move_to_tile", kind: "message", oneof: "extra", T: () => MoveToTileExtra },
            { no: 4, name: "money_exchange", kind: "message", oneof: "extra", T: () => MoneyExchangeExtra },
            { no: 5, name: "move_steps", kind: "message", oneof: "extra", T: () => MoveStepsExtra },
            { no: 6, name: "collectible", kind: "message", oneof: "extra", T: () => CollectibleExtra }
        ]);
    }
    create(value?: PartialMessage<Chance>): Chance {
        const message = { extra: { oneofKind: undefined } };
        if (value !== undefined)
            reflectionMergePartial<Chance>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Chance): Chance {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* monopoly.ChanceDisplay display */ 1:
                    message.display = ChanceDisplay.internalBinaryRead(reader, reader.uint32(), options, message.display);
                    break;
                case /* bool unspecified */ 2:
                    message.extra = {
                        oneofKind: "unspecified",
                        unspecified: reader.bool()
                    };
                    break;
                case /* monopoly.MoveToTileExtra move_to_tile */ 3:
                    message.extra = {
                        oneofKind: "moveToTile",
                        moveToTile: MoveToTileExtra.internalBinaryRead(reader, reader.uint32(), options, (message.extra as any).moveToTile)
                    };
                    break;
                case /* monopoly.MoneyExchangeExtra money_exchange */ 4:
                    message.extra = {
                        oneofKind: "moneyExchange",
                        moneyExchange: MoneyExchangeExtra.internalBinaryRead(reader, reader.uint32(), options, (message.extra as any).moneyExchange)
                    };
                    break;
                case /* monopoly.MoveStepsExtra move_steps */ 5:
                    message.extra = {
                        oneofKind: "moveSteps",
                        moveSteps: MoveStepsExtra.internalBinaryRead(reader, reader.uint32(), options, (message.extra as any).moveSteps)
                    };
                    break;
                case /* monopoly.CollectibleExtra collectible */ 6:
                    message.extra = {
                        oneofKind: "collectible",
                        collectible: CollectibleExtra.internalBinaryRead(reader, reader.uint32(), options, (message.extra as any).collectible)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Chance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* monopoly.ChanceDisplay display = 1; */
        if (message.display)
            ChanceDisplay.internalBinaryWrite(message.display, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool unspecified = 2; */
        if (message.extra.oneofKind === "unspecified")
            writer.tag(2, WireType.Varint).bool(message.extra.unspecified);
        /* monopoly.MoveToTileExtra move_to_tile = 3; */
        if (message.extra.oneofKind === "moveToTile")
            MoveToTileExtra.internalBinaryWrite(message.extra.moveToTile, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* monopoly.MoneyExchangeExtra money_exchange = 4; */
        if (message.extra.oneofKind === "moneyExchange")
            MoneyExchangeExtra.internalBinaryWrite(message.extra.moneyExchange, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* monopoly.MoveStepsExtra move_steps = 5; */
        if (message.extra.oneofKind === "moveSteps")
            MoveStepsExtra.internalBinaryWrite(message.extra.moveSteps, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* monopoly.CollectibleExtra collectible = 6; */
        if (message.extra.oneofKind === "collectible")
            CollectibleExtra.internalBinaryWrite(message.extra.collectible, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const Chance = new Chance$Type();
